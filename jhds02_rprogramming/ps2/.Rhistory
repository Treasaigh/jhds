data(diamonds)
library(ggplot2)
data(diamonds)
summary(diamonds)
ggplot(data=diamonds, x=x, y=price) + geom_point()
ggplot(data=diamonds, aes(x=x, y=price)) + geom_point()
ggplot(data=diamonds, aes(x=x, y=price)) +
geom_point() +
xlim(3,10)
cor.test(x=diamonds$x, y=diamonds$price)
cor.test(x=diamonds$y, y=diamonds$price)
cor.test(x=diamonds$z, y=diamonds$price)
ggplot(data=diamonds, aes(x=depth, y=price)) +
geom_point()
ggplot(data=diamonds, aes(x=depth, y=price)) +
geom_point() +
xlim(50,75)
ggplot(data=diamonds, aes(x=depth, y=price)) +
geom_point(alpha=1/100) +
xlim(50,75)
ggplot(data=diamonds, aes(x=depth, y=price)) +
geom_point() +
xlim(50,75)
ggplot(data=diamonds, aes(x=depth, y=price)) +
geom_point(alpha=1/100) +
xlim(50,75) +
scale_x_continuous(breaks=c(50,75))
ggplot(data=diamonds, aes(x=depth, y=price)) +
geom_point(alpha=1/100) +
xlim(50,75) +
scale_x_continuous(breaks=seq(50,75,2))
ggplot(data=diamonds, aes(x=depth, y=price)) +
geom_point(alpha=1/100) +
coord_cartesian(xlim=c(50,75)) +
scale_x_continuous(breaks=seq(50,75,2))
ggplot(data=diamonds, aes(x=depth, y=price)) +
geom_point(alpha=1/100) +
coord_cartesian(xlim=c(54,70)) +
scale_x_continuous(breaks=seq(50,75,2))
cor.test(x=diamonds$depth, y=diamonds$price)
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point() +
xlim(0, quantile(diamonds$carat, .99)) +
ylim(0, quantile(diamonds$price, .99))
diamonds$volume <- (diamonds$x * diamonds$y * diamonds$z)
summary(diamonds$volume)
ggplot(data=diamonds, aes(x=volume, y=price)) +
geom_point()
ggplot(data=diamonds, aes(x=volume, y=price)) +
geom_point() +
xlim(0,1000)
ggplot(data=diamonds, aes(x=volume, y=price)) +
geom_point() +
xlim(0,750)
summary(diamonds$volume)
summary(diamonds$volume[(diamonds$volume > 0) & (diamonds$volume <= 800)])
cor.test(x=diamonds$volume[(diamonds$volume > 0) & (diamonds$volume <= 800)],
y=diamonds$price[(diamonds$volume > 0) & (diamonds$volume <= 800)])
dm_sub <- subset(diamonds, (volume > 0) & (volume <= 800))
ggplot(data=dm_sub, aes(x=volume, y=price)) +
geom_point(alpha=1/25)
ggplot(data=dm_sub, aes(x=volume, y=price)) +
geom_point(alpha=1/25) +
geom_smooth()
ggplot(data=dm_sub, aes(x=volume, y=price)) +
geom_point(alpha=1/25) +
geom_smooth(method='lm', color='green')
ggplot(data=dm_sub, aes(x=volume, y=price)) +
geom_point(alpha=1/25) +
geom_smooth(color='green')
library(dplyr)
View(diamonds)
dm_sub <- subset(diamonds, (volume > 0) & (volume <= 800))
data(diamonds)
summary(diamonds)
diamondsByClarity <- diamonds %.%
group_by(clarity) %.%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %.%
arrange(clarity)
View(diamondsByClarity)
View(diamondsByClarity)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
ggplot(data = diamonds_mp_by_clarity,
aes(x=clarity, y=mean_price)) +
geom_bar()
ggplot(data = diamonds_mp_by_clarity,
aes(x=clarity, y=mean_price)) +
geom_bar(color='blue')
ggplot(data = diamonds_mp_by_clarity,
aes(x=clarity, y=mean_price)) +
geom_bar(fill='blue')
ggplot(data = diamonds_mp_by_color,
aes(x=color, y=mean_price)) +
geom_bar(fill='red')
library(gridExtra)
p_clarity <- ggplot(data = diamonds_mp_by_clarity,
aes(x=clarity, y=mean_price)) +
geom_bar(fill='blue')
p_color <- ggplot(data = diamonds_mp_by_color,
aes(x=color, y=mean_price)) +
geom_bar(fill='red')
grid.arrange(p_clarity, p_color, ncol=1)
library(ggplot2)
data(diamonds)
summary(diamonds)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000),]
ggplot(data=diamonds, aes(x=price)) +
geom_histogram()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
scale_y_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
scale_y_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=.1)
library(ggplot2)
data(diamonds)
library(GGally)
library(scales)
library(memisc)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
scale_y_log10()
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_histogram() +
scale_y_continuous(trans=log10_trans())
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point() +
scale_y_continuous(trans=log10_trans())
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2,3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10trans(),
limits = c(350,15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by CubeRoot of Carat')
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2,3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350,15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by CubeRoot of Carat')
head(sort(table(diamonds$carat), decreasing=TRUE))
head(sort(table(diamonds$price), decreasing=TRUE))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=1/25) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(color='blue', alpha=1/25, position='jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(color='blue', alpha=1/2, size=1, position='jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha=1, size=2)))
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(color= ~ clarity, alpha=1/2, size=1, position='jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha=1, size=2)))
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color = clarity), alpha=1/2, size=1, position='jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha=1, size=2)))
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(RColorBrewer)
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color = clarity), alpha=1/2, size=1, position='jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha=1, size=2)))
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color = clarity), alpha=1/2, size=1, position='jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha=1, size=2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color = cut), alpha=1/2, size=1, position='jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha=1, size=2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat with Cut by color')
ggplot(aes(carat, price), data = diamonds) +
geom_point(aes(color = color), alpha=1/2, size=1, position='jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Diamond Color',
reverse = TRUE,
override.aes = list(alpha=1, size=2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data=diamonds)  # I(): use as is for function results
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
this_diamond = data.frame(carat = 1.00,
cut = 'V.Good',
color = 'I',
clarity = 'VS1')
model_estimate = predict(m5, newdata = this_diamond, interval='prediction', level=.95)
library(xlsx)
# Make connection to URL, download, unzip, and load into dataframe
file_url <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
temp <- tempfile()
download.file(file_url, temp, method = 'curl')
download.file(file_url, temp)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
mean(mtcars$hp[mtcars$cyl == 8]) - mean(mtcars$hp[mtcars$cyl == 4])
abs(mean(mtcars$hp[mtcars$cyl == 4]) - mean(mtcars$hp[mtcars$cyl == 8]))
library(datasets)
data(iris)
mean(iris$Sepal.Length[iris$Species == 'virginica'])
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
sumamryRprof()
summaryRprof()
set.seed(1)
rpois(5, 2)
setwd("~/Dropbox/Education/JHDS 2 - R Programming/ps2")
# Example from Instructions
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:20)
testcase <- makeVector(1:20)
cachemean(testcase)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setinv <- function(matinv) mi <<- matinv
getinv <- function() mi
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
mi <- x$getinv()
if(!is.null(mi)) {
message("getting cached data")
return(mi)
}
data <- x$get()
mi <- solve(data, ...)
x$setmean(mi)
mi
}
testmat <- matix(1:36, nrow=6, ncol=6)
testmat <- matrix(1:36, nrow=6, ncol=6)
testmat
testcase2 <- makeCacheMatrix(testmat)
cacheSolve(testcase2)
solve(testmat)
testid <- matrix(data=rep(1,9), nrow=3, ncol=3)
testid
testid_c <- makeCacheMatrix(testid)
cacheSolve(testid_c)
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setinv <- function(matinv) mi <<- matinv
getinv <- function() mi
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
mi <- x$getinv()
if(!is.null(mi)) {
message("getting cached data")
return(mi)
}
data <- x$get()
mi <- solve(data, ...)
x$setinv(mi)
mi
}
testid <- matrix(data=rep(1,9), nrow=3, ncol=3)
testid
testid_c <- makeCacheMatrix(testid)
cacheSolve(testid_c)
x$get
x$get()
testid_c$get()
testid_c$getinv()
testrand <- matrix(data=rnorm(9), nrow=3, ncol=3)
testrand
testrand_c <- makeCacheMatrix(testrand)
solve(testrand)
cacheSolve(testrand_c)
testrand_c$get()
testrand_c$getinv()
testrand <- matrix(data=rnorm(10000), nrow=100, ncol=100)
testbig
testbig <- matrix(data=rnorm(10000), nrow=100, ncol=100)
testbig
solve(testbig)
testbig_c <- makeCacheMatrix(testbig)
cacheSolve(testbig_c)
identical(cacheSolve(testbig_c), solve(testbig))
identical(testbig_c$getinv, solve(testbig))
identical(testbig_c$getinv(), solve(testbig))
identical(testbig, testbig_c$get())
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setinv <- function(matinv) mi <<- matinv
getinv <- function() mi
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
mi <- x$getinv()
if(!is.null(mi)) {
message("getting cached data")
return(mi)
}
data <- x$get()
mi <- solve(data, ...)
x$setinv(mi)
mi
}
testrand <- matrix(data=rnorm(9), nrow=3, ncol=3)
testrand
solve(testrand)
testrand_c <- makeCacheMatrix(testrand)
cacheSolve(testrand_c)
testrand_c$get()
testrand_c$getinv()
testbig <- matrix(data=rnorm(10000), nrow=100, ncol=100)
testbig
solve(testbig)
testbig_c <- makeCacheMatrix(testbig)
cacheSolve(testbig_c)
identical(cacheSolve(testbig_c), solve(testbig))
identical(testbig_c$getinv(), solve(testbig))
identical(testbig, testbig_c$get())
