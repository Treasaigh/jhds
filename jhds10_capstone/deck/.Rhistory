udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
install.packages('KernSmooth')
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
# Overall function: given a square matrix, this will create an object that stores the
# original matrix, computes its inverse matrix, and stores the inverse matrix to be
# accessible without needing to compute it repeatedly from the original square matrix.
# Create a special matrix object that holds the passed matrix, its computed inverse,
# and enclosed functions to access the enclosed data computed.
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setinv <- function(matinv) mi <<- matinv
getinv <- function() mi
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
# returns the inverse of the cached matrix-like object instantiated above.
# If the inverse has already been computed, that value is accessed and returned.
# If the inverse has not yet been computed: it is computed, stored in the
# cache object, and then returned.
cacheSolve <- function(x, ...) {
mi <- x$getinv()
if(!is.null(mi)) {
message("getting cached data")
return(mi)
}
data <- x$get()
mi <- solve(data, ...)
x$setinv(mi)
mi
}
testrand <- matrix(data=rnorm(9), nrow=3, ncol=3)
testrand
solve(testrand)
testrand_c <- makeCacheMatrix(testrand)
cacheSolve(testrand_c)
testrand_c$get()
testrand_c$getinv()
testbig <- matrix(data=rnorm(10000), nrow=100, ncol=100)
testbig_c <- makeCacheMatrix(testbig)
cacheSolve(testbig_c)
identical(cacheSolve(testbig_c), solve(testbig))
identical(testbig_c$getinv(), solve(testbig))
identical(testbig, testbig_c$get())
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
install_from_swirl("Data Analysis")
swirl()
setwd("~/Dropbox/Education/JHDS 10 - Capstone")
library(stringr)
load(file = './data/app_data_ref.RData')
clean_string <- function(corpus) {
output <- tolower(corpus)
output <- str_replace_all(output, pattern = "'", replacement = "")
output <- str_replace_all(output, pattern = "[^[:print:]]", replacement = "")
output <- str_replace_all(output, pattern = "[^[:alpha:] | [:space:]]", replacement = "")
output <- str_trim(output, side = 'both')
output <- str_replace_all(output, pattern = " {2,}", replacement = " ")
output <- str_split(output, pattern = "[[:space:]]")
output <- unlist(output)
output
}
setwd("~/Dropbox/Education/JHDS 10 - Capstone/app_versions/sk_app_0")
library(shiny)
runApp()
runApp()
runApp()
runApp()
'of'
setwd("~/Dropbox/Education/JHDS 10 - Capstone")
library(stringr)
clean_curse <- function(df) {
curse_words <- scan(file = './data/curse_words.txt', what = 'character', sep = '\n')
output <- subset(df, !v %in% curse_words)
curse_sub <- c('fuck','shit','cunt','nigger')
for (each in curse_sub) {
output <- subset(output, (! str_detect(string = v, pattern = each)))
}
output
}
# Load int ref docs
ref_all1 <- read.table(file = './data/int_ref_all_n1.csv',
header = TRUE, sep = '|', stringsAsFactors = FALSE)
ref_all1 <- clean_curse(ref_all1)
ref_all2 <- read.table(file = './data/int_ref_all_n2.csv',
header = TRUE, sep = '|', stringsAsFactors = FALSE)
ref_all2 <- clean_curse(ref_all2)
ref_all3 <- read.table(file = './data/int_ref_all_n3.csv',
header = TRUE, sep = '|', stringsAsFactors = FALSE)
ref_all3 <- clean_curse(ref_all3)
ref_wf_all <- read.table(file = './data/int_word_freq_all.csv',
header = TRUE, sep = '|', stringsAsFactors = FALSE)
ref_wf_all <- clean_curse(ref_wf_all)
# hangout tip: map strings to integers to make more efficient
# Subset
n_rows <- 100000
ref_list <- list(n1 = ref_all1[1:n_rows,],
n2 = ref_all2[1:n_rows,],
n3 = ref_all3[1:n_rows,],
wf = ref_wf_all[2:25,])
save(ref_list, file = './data/app_data_ref.RData')
# Subset
n_rows <- 1000000
ref_list <- list(n1 = ref_all1[1:n_rows,],
n2 = ref_all2[1:n_rows,],
n3 = ref_all3[1:n_rows,],
wf = ref_wf_all[2:25,])
save(ref_list, file = './data/app_data_ref.RData')
n_rows <- 2500000
ref_list <- list(n1 = ref_all1[1:n_rows,],
n2 = ref_all2[1:n_rows,],
n3 = ref_all3[1:n_rows,],
wf = ref_wf_all[2:25,])
save(ref_list, file = './data/app_data_ref.RData')
n_rows <- 500000
ref_list <- list(n1 = ref_all1[1:n_rows,],
n2 = ref_all2[1:n_rows,],
n3 = ref_all3[1:n_rows,],
wf = ref_wf_all[2:25,])
save(ref_list, file = './data/app_data_ref.RData')
setwd("~/Dropbox/Education/JHDS 10 - Capstone/app_versions/sk_app_0.2")
runApp()
setwd("~/Dropbox/Education/JHDS 10 - Capstone/app_versions/sk_app_0.1")
runApp()
shiny::runApp()
install.packages("devtools")
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='frankdevans', token='45D2EB9F3EE43514CA78CC029BF817B3', secret='toXzlsRz9Q2Q71pcHI7AqL6H49IBfOlqU8gCtKqV')
deployApp()
setwd("~/Dropbox/Education/JHDS 10 - Capstone/app_versions/sk0-1")
deployApp()
setwd("~/Dropbox/Education/JHDS 10 - Capstone/app_versions/sk0-2")
deployApp()
setwd("~/Dropbox/Education/JHDS 10 - Capstone/app_versions/deck")
- Bullet 3
